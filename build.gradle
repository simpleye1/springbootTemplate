buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:8.1.2"
    }
}
plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.12'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.8"
    id "io.freefair.lombok" version "6.3.0"
    id "org.owasp.dependencycheck" version '8.1.2'
    id 'com.avast.gradle.docker-compose' version "0.16.11"
}

application {
    mainClassName = "com.ysg.servicetemplate.BootstrapApplication"
    applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}


sourceSets {

    apiTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

task aaa {
    sourceSets.all{set ->
        println "${set.name}的文件是 ${set.java.srcDirs}"
    }
}

configurations {
    apiTestImplementation.extendsFrom testImplementation
    apiTestRuntimeOnly.extendsFrom testRuntimeOnly

}

repositories {
    mavenCentral()
}


dependencies {
    // general dependencies. should not modify in specific project.
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'javax.persistence:javax.persistence-api:2.2'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.12'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure:2.5.12'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.12'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.12'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.5'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.0.6'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    implementation 'org.flywaydb:flyway-core:7.15.0'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'io.github.openfeign:feign-httpclient:11.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.0'
    runtimeOnly 'mysql:mysql-connector-java:8.0.25'

    // general test only dependencies.
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    testAnnotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
    testAnnotationProcessor 'javax.persistence:javax.persistence-api:2.2'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    testImplementation 'com.tngtech.archunit:archunit-junit5:0.22.0'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    testImplementation 'io.rest-assured:spring-mock-mvc:4.4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.12'
    testImplementation 'com.h2database:h2:1.4.200'

    // specific dependencies.
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.5.12'
}


test {
    description = 'Run unit tests.'
    group = 'verification'
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('apiTest', Test) {
    description = 'Run API tests.'
    group = 'verification'
    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn apiTest

processResources {
    filesMatching("**/application*.yml") {
        expand([
                "appName": rootProject.name
        ])
    }
}
apply from: "${projectDir}/gradle/docker-compose/docker-compose.gradle"
apply from: "${projectDir}/gradle/idea.gradle"
apply from: "${projectDir}/gradle/jacoco.gradle"
apply from: "${projectDir}/gradle/checkstyle/checkstyle.gradle"
apply from: "${projectDir}/gradle/git-hooks/git-hooks.gradle"
apply from: "${projectDir}/gradle/sonarqube.gradle"
